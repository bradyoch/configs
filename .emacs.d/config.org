#+TITLE: Brady Org-anized Emacs Config

New and improved emacs configuration file

* GUI Configurations
** Default Frame

Setting for all the frames

#+BEGIN_SRC emacs-lisp
  (modify-all-frames-parameters '((internal-border-width . 10)
                                  (width . 80)
                                  (background-color . "honeydew2")
                                  (left-fringe . 0)
                                  (right-fringe . 0)))
#+END_SRC

Set the default font

#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing .15)
  (cond
   ((eq window-system 'x)
    (set-frame-font (font-spec :family "Hack" :size 10) nil t))
   ((eq window-system 'w32)
    (set-frame-font (font-spec :family "Consolas" :size 12) nil t)))
#+END_SRC

** Elements

Load the GUI first to minimize flickering as emacs loads

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      (progn
	(scroll-bar-mode -1)
	(tool-bar-mode -1)))
  (menu-bar-mode -1)
#+END_SRC

Let's add some very needed line numbers

#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-width-start 3)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'text-mode-hook 'display-line-numbers-mode)
#+END_SRC

Also make the bar show the column number too

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

** Startup Messages

Remove the annoying startup messages

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message 't
	initial-scratch-message "")
#+END_SRC

** Smoother Scrolling

Make emacs scroll better

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 1000
        mouse-wheel-scroll-amount '(3 ((shift) . 1) ((control . nil)))
        mouse-wheel-progressive-speed nil
        scroll-margin 2)
#+END_SRC

** Annoying Mouse

Remove annoying mouse behavior

#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "<mouse-2>"))
#+END_SRC

** Rich Minority (light)

Nuke the minority display alist after loading

#+BEGIN_SRC emacs-lisp
  (defun brady/wipe-minor-modes ()
    (setq minor-mode-alist nil))
  (add-hook 'after-init-hook 'brady/wipe-minor-modes)
#+END_SRC

* Sane Defaults
** Saving

Get rid of the backup and autosave buffers

#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil
	make-backup-files nil)
#+END_SRC

Enforce styling on save

#+BEGIN_SRC emacs-lisp
  (defun brady/enforce-styling ()
    (delete-trailing-whitespace 0)
    (set-buffer-file-coding-system 'unix))

  (add-hook 'before-save-hook 'brady/enforce-styling)
#+END_SRC

** General Styling

Tabs are from an age in the past

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

** Customization

Dump customize.el in it's own file

#+BEGIN_SRC emacs-lisp
  (let ((custom (brady/config-file-string "custom.el")))
    (setq custom-file custom)
    (if (file-exists-p custom)
        (load-file custom)))
#+END_SRC

** Misc

Use electric pairs for modern pair matching

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

* Startup
* Packages
** Use Package

Setup some use package variables

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Which key

Use which-key to figure out all the keybindings

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC

** Company

Use company as an autocompletion framework

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config (global-company-mode 1))
#+END_SRC

** Ivy

Ivy for the better read-select prompt

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (setq ivy-use-selectable-prompt t)
    (ivy-mode 1))
#+END_SRC

** Swiper/Counsel

And add swiper for better search and counsel for better everything else

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after ivy
    :config
    (counsel-mode 1))
#+END_SRC

** Magit mode because... yeah

#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

** Neotree

Very nice file system browsing

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :bind ("<f8>" . neotree-toggle))
#+END_SRC

** Trendy mode

Go mode for the good times

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode "\\*.go\\'")
#+END_SRC

* EVIL Mode

I'm done with hurting my fingers to avoid evil mode.

Load the base evil package first

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

Now load the evil-collection to make maximum compatibility

#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+END_SRC

And finally make SPC the leader key

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'evil-leader-map)

  (defun brady/add-leader (binding)
    "Define a key to be used in the evil leader keymap"
    (define-key evil-leader-map
      (kbd (car binding)) (cdr binding)))

  (mapc 'brady/add-leader
        '(("w" . evil-window-map)
          ("c" . mode-specific-command-prefix)
          ("g" . magit-status)))

  (define-key evil-normal-state-map (kbd "SPC") 'evil-leader-map)
#+END_SRC
* Server Mode

Lastly start emacs in server mode if one isn't already running

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC
