#+TITLE: Emacs Configuration (new and improved)
#+OPTIONS: toc: nil num: nil

* Startup Options
** Server mode

Start emacs in server mode to use with 'emacsclient'

#+BEGIN_SRC emacs-lisp
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+END_SRC

** Saving Options

Disable autosaving and backup buffer

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil
        auto-save-default nil)
#+END_SRC

** Custom settings

Make custom.el put its junk elsewhere

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat
                     (directory-file-name user-emacs-directory)
                     "/customization.el"))
#+END_SRC

* Interface Options
** GUI Changes

Remove unneeded gui elements from emacs

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (if window-system
      (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1)))
#+END_SRC

Display the column number in the bar

#+BEGIN_SRC emacs-lisp
  (column-number-mode 1)
#+END_SRC

Remove unneeded minor modes from the bar

#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (setq minor-mode-alist nil)))
#+END_SRC

** Frame Variables

Setup the font on windows and linux

#+BEGIN_SRC emacs-lisp
  (cond
   ((eq window-system 'x)
    (set-frame-font (font-spec :family "Fira Code" :size 10 :antialias t) nil t))
   ((eq window-system 'w32)
    (set-frame-font (font-spec :family "Consolas" :size 10) nil t)))
#+END_SRC

Add a border around the frame to look nice

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'internal-border-width 22)
  (add-hook 'after-make-frame-functions
            (lambda (frame)
              (set-frame-parameter frame 'internal-border-width 22)))
#+END_SRC

** Startup

Remove the startup buffers

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+END_SRC
** Scrolling

Scroll smoother with the mouse wheel

#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 1000
        mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control . nil)))
        mouse-wheel-progressive-speed nil)
#+END_SRC
* Format Options
** No tabs

Don't ever use tabs

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

But if I need to use tabs... looking at you Go

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
#+END_SRC

** On save

Apply some tweaks on save

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'before-save-hook '(lambda ()
                                 (set-buffer-file-coding-system
                                  'unix)))
#+END_SRC
* Packages

Require use-package.el for further package installation

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** God Mode

Use God mode for better keybindings

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :if nil
    :init
    (setq god-exempt-major-modes nil
          god-exempt-predicates nil)
    :bind (("<escape>" . god-mode-all)
           ("C-x C-0" . delete-window)
           ("C-x C-1" . delete-other-windows)
           ("C-x C-2" . split-window-below)
           ("C-x C-3" . split-window-right)
           ("C-`" . keyboard-quit)
           :map god-local-mode-map
           ("z" . repeat)
           ("i" . god-local-mode))
    :config (god-mode-all))
#+END_SRC

Setup some nice visual functions

#+BEGIN_SRC emacs-lisp
  (defun brady/update-cursor ()
    (setq cursor-type (if (or god-local-mode buffer-read-only)
                          'box
                        'bar)))

  (add-hook 'god-mode-enabled-hook 'brady/update-cursor)
  (add-hook 'god-mode-disabled-hook 'brady/update-cursor)
#+END_SRC

** Company Mode

Use company mode for better completion

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+END_SRC
** Gruvbox theme

Use a better theme

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox t))
#+END_SRC

** Org Mode

Customizations for org mode

#+BEGIN_SRC emacs-lisp
  (setq org-support-shift-select t)
#+END_SRC

** Dired Mode

Special version of dired

#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq-default dired-omit-files-p t)
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
#+END_SRC

** Ido Mode

Use ido mode for completion

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t
        ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Expand Region

Expand region to gradually select more and more text

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+END_SRC

* Keybindings

** Misc Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
  (global-set-key (kbd "C-x C-SPC k") 'kill-buffer)
#+END_SRC
